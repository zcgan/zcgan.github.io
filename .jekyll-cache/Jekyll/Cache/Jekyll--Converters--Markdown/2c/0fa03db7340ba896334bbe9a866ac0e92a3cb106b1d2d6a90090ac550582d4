I"NL<!-- ### Gradient descent and its variants -->
<p>Here, we present simple comparison on gradient descent and its variants (heavy-ball method, Nesterovâ€™s accelerated scheme and restarting FISTA) when applying to solve a simple least square estimation problem which is described below
\[
\min_{x \in \mathbb{R}^n} { F(x) = \tfrac{1}{2} \|Ax - b\|^2 }  ,
\]
where \(b \in \mathbb{R}^n\) and \(A \in \mathbb{R}^{n\times n}\) is of the form
\[
A =
\begin{bmatrix}
2 &amp; -1 &amp; &amp; &amp;   \\ 
-1 &amp; 2 &amp; -1 &amp; &amp;   \\ 
&amp;  &amp; \dotsm &amp; &amp; \\ 
&amp; &amp; -1 &amp; 2 &amp; -1  \\ 
&amp; &amp; &amp; -1 &amp; 2  \ 
\end{bmatrix}_{n}   .
\]</p>

<p>The gradient descent for sovling the above problem would be 
\[
\begin{align}
x_{k+1} &amp;= x_k - \gamma \nabla F(x_k) \\ 
&amp;= x_k - \gamma A^T (Ax_k - b) .
\end{align}
\]</p>

<p>In the experiment, consider \(n = 50\) and simply set \(b = 0\).</p>

<p><strong>Creating matrix \(A\)</strong></p>
<div class="language-matlab highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">A</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="nb">eye</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="o">-</span> <span class="nb">diag</span><span class="p">(</span><span class="nb">ones</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">-</span> <span class="nb">diag</span><span class="p">(</span><span class="nb">ones</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="mi">1</span><span class="p">);</span>
</code></pre></div></div>

<p><strong>Parameters</strong> All the parameters of the algorithm will be stored in a structure +para+</p>
<div class="language-matlab highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">para</span><span class="o">.</span><span class="n">n</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span> <span class="c1">% dimension of the problem</span>
<span class="n">para</span><span class="o">.</span><span class="nb">gamma</span> <span class="o">=</span> <span class="mf">1.0</span> <span class="p">/</span><span class="nb">norm</span><span class="p">(</span><span class="n">A</span><span class="p">)</span><span class="o">^</span><span class="mi">2</span><span class="p">;</span> <span class="c1">% step-size</span>
<span class="n">para</span><span class="o">.</span><span class="n">maxits</span> <span class="o">=</span> <span class="mf">1e6</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">% maximum number of iteration</span>
<span class="n">para</span><span class="o">.</span><span class="n">tol</span> <span class="o">=</span> <span class="mf">1e-16</span><span class="p">;</span> <span class="c1">% stopping criterion for ||x_{k}-x_{k_1}||</span>
<span class="n">para</span><span class="o">.</span><span class="n">x0</span> <span class="o">=</span> <span class="mf">1e4</span><span class="o">*</span><span class="nb">ones</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">% starting point</span>
</code></pre></div></div>

<p><strong>Gradient and objective function</strong>
The gradient and objective function will be dealt by MATLAB function handle</p>
<div class="language-matlab highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">% define function handles</span>
<span class="n">objF</span> <span class="o">=</span> <span class="o">@</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="nb">norm</span><span class="p">(</span><span class="n">A</span><span class="o">*</span><span class="n">x</span><span class="o">-</span><span class="n">b</span><span class="p">)</span><span class="o">^</span><span class="mi">2</span> <span class="p">/</span><span class="mi">2</span><span class="p">;</span>
<span class="n">gradF</span> <span class="o">=</span> <span class="o">@</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">(</span><span class="n">A</span><span class="o">'</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">A</span><span class="o">*</span><span class="n">x</span> <span class="o">-</span> <span class="n">b</span><span class="p">);</span>
</code></pre></div></div>

<p><strong><em>m-file</em> source code for gradient descent</strong> The code for gradient descent is written in a solo file.</p>
<div class="language-matlab highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">% funciton for gradient descent</span>
<span class="k">function</span> <span class="p">[</span><span class="n">x</span><span class="p">,</span> <span class="n">its</span><span class="p">,</span> <span class="n">ek</span><span class="p">,</span> <span class="n">fk</span><span class="p">]</span> <span class="o">=</span> <span class="n">func_GD</span><span class="p">(</span><span class="n">para</span><span class="p">,</span> <span class="n">gradF</span><span class="p">,</span> <span class="n">objF</span><span class="p">)</span>

<span class="c1">% this function returns</span>
<span class="c1">%    x the solution of the problem</span>
<span class="c1">%    total number of iteration needed to reach the stopping criterion</span>
<span class="c1">%    history of ||x_{k} - x_{k-1}||</span>
<span class="c1">%    history of objective function value F(x_{k})</span>

<span class="c1">% get the parameters</span>
<span class="n">n</span> <span class="o">=</span> <span class="n">para</span><span class="o">.</span><span class="n">n</span><span class="p">;</span>
<span class="nb">gamma</span> <span class="o">=</span> <span class="n">para</span><span class="o">.</span><span class="nb">gamma</span><span class="p">;</span>
<span class="n">tol</span> <span class="o">=</span> <span class="n">para</span><span class="o">.</span><span class="n">tol</span><span class="p">;</span>
<span class="n">maxits</span> <span class="o">=</span> <span class="n">para</span><span class="o">.</span><span class="n">maxits</span><span class="p">;</span>

<span class="n">ek</span> <span class="o">=</span> <span class="nb">zeros</span><span class="p">(</span><span class="n">maxits</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">% record ||x_{k}-x_{k-1}||</span>
<span class="n">fk</span> <span class="o">=</span> <span class="nb">zeros</span><span class="p">(</span><span class="n">maxits</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">% record objective function value</span>

<span class="n">x</span> <span class="o">=</span> <span class="n">para</span><span class="o">.</span><span class="n">x0</span><span class="p">;</span> <span class="c1">% set the initial point</span>

<span class="n">its</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="k">while</span><span class="p">(</span><span class="n">its</span><span class="o">&lt;</span><span class="n">maxits</span><span class="p">)</span>

    <span class="n">fk</span><span class="p">(</span><span class="n">its</span><span class="p">)</span> <span class="o">=</span> <span class="n">objF</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>

    <span class="n">x_old</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-</span> <span class="nb">gamma</span><span class="o">*</span><span class="n">gradF</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>

    <span class="c1">%%%%%%% compute residual and checking stopping criterion</span>
    <span class="n">res</span> <span class="o">=</span> <span class="nb">norm</span><span class="p">(</span><span class="n">x_old</span><span class="o">-</span><span class="n">x</span><span class="p">,</span> <span class="s1">'fro'</span><span class="p">);</span>
    <span class="n">ek</span><span class="p">(</span><span class="n">its</span><span class="p">)</span> <span class="o">=</span> <span class="n">res</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">res</span><span class="p">/</span><span class="nb">prod</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="o">&lt;</span><span class="n">tol</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="n">res</span><span class="o">&gt;</span><span class="mf">1e10</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span> <span class="k">end</span>

    <span class="n">its</span> <span class="o">=</span> <span class="n">its</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>

<span class="k">end</span>
<span class="nb">fprintf</span><span class="p">(</span><span class="s1">'\n'</span><span class="p">);</span>

<span class="n">ek</span> <span class="o">=</span> <span class="n">ek</span><span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="n">its</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
<span class="n">fk</span> <span class="o">=</span> <span class="n">fk</span><span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="n">its</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</code></pre></div></div>

<p><strong><em>m-file</em> source code for FISTA</strong></p>
<div class="language-matlab highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">% function for FISTA</span>
<span class="k">function</span> <span class="p">[</span><span class="n">x</span><span class="p">,</span> <span class="n">its</span><span class="p">,</span> <span class="n">ek</span><span class="p">,</span> <span class="n">fk</span><span class="p">]</span> <span class="o">=</span> <span class="n">func_FISTA</span><span class="p">(</span><span class="n">para</span><span class="p">,</span> <span class="n">gradF</span><span class="p">,</span> <span class="n">objF</span><span class="p">)</span>

<span class="c1">% this function returns</span>
<span class="c1">%    x the solution of the problem</span>
<span class="c1">%    total number of iteration needed to reach the stopping criterion</span>
<span class="c1">%    history of ||x_{k} - x_{k-1}||</span>
<span class="c1">%    history of objective function value F(x_{k})</span>

<span class="c1">% get the parameters</span>
<span class="n">n</span> <span class="o">=</span> <span class="n">para</span><span class="o">.</span><span class="n">n</span><span class="p">;</span>
<span class="nb">gamma</span> <span class="o">=</span> <span class="n">para</span><span class="o">.</span><span class="nb">gamma</span><span class="p">;</span>
<span class="n">tol</span> <span class="o">=</span> <span class="n">para</span><span class="o">.</span><span class="n">tol</span><span class="p">;</span>
<span class="n">maxits</span> <span class="o">=</span> <span class="n">para</span><span class="o">.</span><span class="n">maxits</span><span class="p">;</span>

<span class="n">ek</span> <span class="o">=</span> <span class="nb">zeros</span><span class="p">(</span><span class="n">maxits</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">% record ||x_{k}-x_{k-1}||</span>
<span class="n">fk</span> <span class="o">=</span> <span class="nb">zeros</span><span class="p">(</span><span class="n">maxits</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">% record objective function value</span>

<span class="n">x</span> <span class="o">=</span> <span class="n">para</span><span class="o">.</span><span class="n">x0</span><span class="p">;</span> <span class="c1">% set the initial point</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
<span class="n">t</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">% for FISTA parameter updates</span>

<span class="n">its</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="k">while</span><span class="p">(</span><span class="n">its</span><span class="o">&lt;</span><span class="n">maxits</span><span class="p">)</span>

    <span class="n">fk</span><span class="p">(</span><span class="n">its</span><span class="p">)</span> <span class="o">=</span> <span class="n">objF</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>

    <span class="n">x_old</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">y</span> <span class="o">-</span> <span class="nb">gamma</span><span class="o">*</span><span class="n">gradF</span><span class="p">(</span><span class="n">y</span><span class="p">);</span>

    <span class="c1">% computing the FISTA parameter</span>
    <span class="n">t_old</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span>
    <span class="n">t</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="nb">sqrt</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="mi">4</span><span class="o">*</span><span class="n">t_old</span><span class="o">^</span><span class="mi">2</span><span class="p">))</span> <span class="p">/</span><span class="mi">2</span><span class="p">;</span>
    <span class="n">a</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="n">t_old</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">/</span><span class="n">t</span><span class="p">);</span>

    <span class="c1">% extrapolation update</span>
    <span class="n">y</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">a</span><span class="o">*</span><span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="n">x_old</span><span class="p">);</span>

    <span class="c1">%%%%%%% compute residual and checking stopping criterion</span>
    <span class="n">res</span> <span class="o">=</span> <span class="nb">norm</span><span class="p">(</span><span class="n">x_old</span><span class="o">-</span><span class="n">x</span><span class="p">,</span> <span class="s1">'fro'</span><span class="p">);</span>
    <span class="n">ek</span><span class="p">(</span><span class="n">its</span><span class="p">)</span> <span class="o">=</span> <span class="n">res</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">res</span><span class="p">/</span><span class="nb">prod</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="o">&lt;</span><span class="n">tol</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="n">res</span><span class="o">&gt;</span><span class="mf">1e10</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span> <span class="k">end</span>

    <span class="n">its</span> <span class="o">=</span> <span class="n">its</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>

<span class="k">end</span>
<span class="nb">fprintf</span><span class="p">(</span><span class="s1">'\n'</span><span class="p">);</span>

<span class="n">ek</span> <span class="o">=</span> <span class="n">ek</span><span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="n">its</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
<span class="n">fk</span> <span class="o">=</span> <span class="n">fk</span><span class="p">(</span><span class="mi">1</span><span class="p">:</span><span class="n">its</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</code></pre></div></div>
<p>Similarly, we can write the code for heavy-ball method and restarting FISTA.</p>

<p><strong>Comparison</strong> The numerical comparison of <em>gradient descent, inertial gradient descent, FISTA and restarting FISTA</em> is illustrated in the figure below.
<img src="projects/cmp-lse-fk.png" alt="Comparison" /></p>

<p><strong>Codes for solving LASSO problem</strong> It is very easy to have the code for LASSO problem once we have the code for gradient descent, as we only need to change</p>
<div class="language-matlab highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">% gradient descent</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-</span> <span class="nb">gamma</span><span class="o">*</span><span class="n">gradF</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</code></pre></div></div>
<p>to</p>
<div class="language-matlab highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">% proximal gradient descent</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">wthresh</span><span class="p">(</span> <span class="n">x</span> <span class="o">-</span> <span class="nb">gamma</span><span class="o">*</span><span class="n">gradF</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="s1">'s'</span><span class="p">,</span> <span class="n">mu</span><span class="o">*</span><span class="nb">gamma</span><span class="p">);</span>
</code></pre></div></div>
<p>where \(\mu\) is the tradeoff parameter in front of the \(\ell_1\)-norm.</p>

<!-- #### Math equations


##### The Quadratic Formula
\\[x = {-b \pm \sqrt{b^2-4ac} \over 2a}.\\]

##### Cauchy's Integral Formula
\\[f(a) = \frac{1}{2\pi i} \oint\frac{f(z)}{z-a}dz\\]

##### Double angle formula for Cosines
\\[ \cos(Î¸+Ï†)=\cos(Î¸)\cos(Ï†)âˆ’\sin(Î¸)\sin(Ï†) \\]

##### Gauss' Divergence Theorem
\\[ \int_D ({\nabla\cdot} F)dV=\int_{\partial D} F\cdot ndS \\]

##### Curl of a Vector Field
\\[
\vec{\nabla} \times \vec{F} =
\left( \frac{\partial F_z}{\partial y} - \frac{\partial F_y}{\partial z} \right) \mathbf{i} + \left( \frac{\partial F_x}{\partial z} - \frac{\partial F_z}{\partial x} \right) \mathbf{j} + \left( \frac{\partial F_y}{\partial x} - \frac{\partial F_x}{\partial y} \right) \mathbf{k}
\\]

##### Standard Deviation
\\[\sigma = \sqrt{ \frac{1}{N} \sum_{i=1}^N (x_i -\mu)^2} \\]

##### Definition of Christoffel Symbols
\\[(\nabla_X Y)^k = X^i (\nabla_i Y)^k =
X^i \left( \frac{\partial Y^k}{\partial x^i} + \Gamma_{im}^k Y^m \right)\\]


#### Equation referencing \eqref{eq:circle}

\\[\label{eq:circle} \tag{1}
x^2 + y^2 = 1.
\\]
 -->

:ET